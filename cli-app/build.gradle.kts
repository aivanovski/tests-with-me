import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import java.io.BufferedWriter
import java.io.FileInputStream
import java.io.FileWriter
import java.util.Properties
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlinSerialization)
    alias(libs.plugins.shadowjar)
    alias(libs.plugins.jpa)
    id("jacoco")
}

val appGroupId = "com.github.aivanovski"

group = appGroupId
version = libs.versions.appVersion.get()

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks {
    withType<KotlinCompile> {
        kotlinOptions {
            jvmTarget = "11"
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy("jacocoTestReport")
    }

    jacocoTestReport {
        reports {
            val coverageDir = File("$buildDir/reports/coverage")
            csv.required.set(true)
            csv.outputLocation.set(File(coverageDir, "coverage.csv"))
            html.required.set(true)
            html.outputLocation.set(coverageDir)
        }

        dependsOn(allprojects.map { it.tasks.named<Test>("test") })
    }

    named<ShadowJar>("shadowJar") {
        archiveFileName.set("tests-with-me.jar")
        mergeServiceFiles()
        manifest {
            attributes(mapOf("Main-Class" to "com.github.aivanovski.testswithme.cli.CliAppMainKt"))
        }
    }

    classes {
        dependsOn("createPropertyFileWithVersion")
    }

    register("createPropertyFileWithVersion") {
        doLast {
            val propertyName = "version"
            val propsFile = File("$projectDir/src/main/resources/version.properties")
            val props = Properties()

            if (propsFile.exists()) {
                props.load(FileInputStream(propsFile))
            }

            if (props[propertyName] != version) {
                project.logger.lifecycle("Updating file: version.properties")
                props[propertyName] = version
                val parentFile = propsFile.parentFile
                if (!parentFile.exists()) {
                    parentFile.mkdirs()
                }
                props.store(BufferedWriter(FileWriter(propsFile)), "File is generated by Gradle")
            }
        }
    }
}

dependencies {
    testImplementation(libs.junit.engine)
    testImplementation(libs.kotest.runner)
    testImplementation(libs.kotest.assertions)
    testImplementation(libs.mockk)

    implementation(libs.logback)
    implementation(libs.koin)
    implementation(libs.kotlin.reflect)

    // Network
    implementation(libs.ktor.client.core)
    implementation(libs.ktor.client.okhttp)
    implementation(libs.ktor.client.logging)

    // Json
    implementation(libs.kotlinx.json)

    // Dadb
    implementation(libs.dadb)

    // Arrow
    implementation(libs.arrow.core)
    implementation(libs.arrow.coroutines)

    // Common logic and API
    implementation(project(":tests-with-me"))
    implementation(project(":driver-server-api"))
}